import pyglet, random, math
from game import player, ball, load, resources

# Set up the main game window
game_window = pyglet.window.Window(800,600)
main_batch = pyglet.graphics.Batch()

# Set up the scoreboard
hum_score_label = pyglet.text.Label(text = "Human Score: 0", x = 10, y = 575, batch = main_batch)
comp_score_label = pyglet.text.Label(text = "Robot Score: 0", x = 550, y = 575, batch = main_batch)

counter = pyglet.clock.ClockDisplay()

hum_paddle = None
comp_paddle = None
pong_ball = None
hum_score = 0
comp_score = 0
game_objects = []

event_stack_size = 0

def init():
    global hum_score, comp_score

    hum_score = 0
    hum_score_label.text = "Human Score: " + str(hum_score)
    comp_score = 0
    comp_score_label.text = "Robot Score: " + str(comp_score)

def reset_game()
    global human_paddle, comp_paddle, pong_ball, game_objects, event_stack_size
    
    while event_stack_size > 0
        game_window.pop_handlers()
        event_stack_size -= 1

    hum_paddle = paddle.Player(x=100, y = 300, batch = main_batch)
    comp_paddle = paddle.Player(x=700, y = 300, batch = main_batch)
    pong_ball = load.ball(x = 400, y = 300, main_batch)

    game_objects = [hum_paddle] + [comp_paddle] + pong_ball

    for obj in game_objects:
        for handler in obj.event_handlers:
            game_window.push_handlers(handler)
            event_stack_size += 1

@game_window.event
def on_draw():
    game_window.clear()
    main_batch.draw()
    counter.draw()

def update(dt):
    global hum_score, comp_score

    player_score = False
    victory = False

    for i in xrange
