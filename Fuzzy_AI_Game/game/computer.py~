import pyglet, math
from pyglet.window import key
import physicalobject, resources, fuzzpaddle, util, config

class Computer(physicalobject.PhysicalObject):
    
    def __init__(self, *args, **kwargs):
        super(Computer, self).__init__(img=resources.paddle, *args, **kwargs)

        self.thrust = 300.0
        self.score = 0

        self.key_handler = key.KeyStateHandler()
        self.event_handlers = [self, self.key_handler]
        
        # Center of the paddle in the y direction
        self.center = self.y + (self.image.height/2)

    def handle_movement(self):
        """ Figures out where the ball will be, and then calls the 
        cascading set of fuzzy sysetms to determine where the paddle 
        should go"""
                
        # Figure out where the ball will intercept the paddle's y-
        # axis and then determine how far away the center of the 
        # paddle is from that point.
        # The ball only needs to be taken into consideration when 
        # it's moving towards the paddle. Otherwise return to the
        # center of the playing field.
        if (config.ball.v_x > 0):
            yint = util.calc_intercept(config.ball, self)
            difference = yint - self.center
            # Now I have the situational awareness needed for the  
            # basic fuzzy controller (just hits the ball, no   
            # strategy). Using the fuzzy systems to                  
            # determine v_y. 
            # game = fuzzpaddle.game_type(config.pl_score, config.comp_score)
            self.move = fuzzpaddle.move_fuzzy(difference)
        else:
            self.move = 0

        return self.move


    def update(self, ball_object, dt):
        super(Computer, self).update(dt)

        # Upadting where the center of the paddle is
        self.center = self.y + (self.image.height/2)        
 
        # Computer is a lot like player, but instead of using the    
        # key handler to control movement we're using a fuzzy system 
        # from "fuzzpaddle".
        letsgo = self.handle_movement()
        if (letsgo != 0):
            self.v_y += letsgo * self.thrust * dt
        else:
            self.v_y = 0
